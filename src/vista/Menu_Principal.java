/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import conexion.Conexion;
import controlador.Ctrl_Artista;
import controlador.Ctrl_Localidades;
import controlador.Ctrl_Usuario;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import java.awt.Color;
import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.Timer;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import modelo.Artista;
import modelo.Evento;

/**
 *
 * @author andre
 */
public class Menu_Principal extends javax.swing.JFrame {

    /**
     * Creates new form Pagina_Menu
     */
    Integer imgIndex = 0;
    ArrayList<byte[]> imgList;
    private List<Evento> eventosList;
    private DefaultTableModel modeloTabla;
    private String textoBusqueda;
    private Timer timer;
    private final int TIEMPO_DE_ESPERA = 5000;

    public Menu_Principal() {
        initComponents();
        imgList = getImagesList();
        eventosList = getEventosList();
        if (!eventosList.isEmpty()) {
            showImage(imgIndex);
        }
        initTabla();

        TextPrompt phn = new TextPrompt("Escribe un Nombre o Categoria", Txt_buscarEvento);
        this.setLocationRelativeTo(null);
        timerSliderImagenes();

        if (Ctrl_Usuario.obtenerUsuarioActivo() == null) {
            botonVertusEventos.setEnabled(false);
            botonVerTickets.setEnabled(false);
            botonVerReservas.setEnabled(false);
            jButton3.setEnabled(false);
            jButton2.setText("Iniciar");
        }
        if (Ctrl_Usuario.obtenerUsuarioActivo() != null) {
            botonVertusEventos.setEnabled(true);
            botonVerTickets.setEnabled(true);
            botonVerReservas.setEnabled(true);
            jButton3.setEnabled(true);
            jButton2.setText(" Crear ");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        LabelImagen = new javax.swing.JLabel();
        botonAnterior = new javax.swing.JButton();
        botonSiguiente = new javax.swing.JButton();
        labelTitulo = new javax.swing.JLabel();
        labelDescripcion = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jLabel7F = new javax.swing.JLabel();
        botonComprarSlider = new javax.swing.JButton();
        labelFecha = new javax.swing.JLabel();
        labelHora = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel7F1 = new javax.swing.JLabel();
        labelDireccion = new javax.swing.JLabel();
        labelEspecialidadArtista = new javax.swing.JLabel();
        jLabel7F2 = new javax.swing.JLabel();
        labelNombreArtista = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        Txt_buscarEvento = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel13 = new javax.swing.JLabel();
        botonVerTickets = new javax.swing.JButton();
        botonVerReservas = new javax.swing.JButton();
        botonVertusEventos = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaMenu = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(null);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        LabelImagen.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        botonAnterior.setText("Anterior");
        botonAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAnteriorActionPerformed(evt);
            }
        });

        botonSiguiente.setText("Siguiente");
        botonSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSiguienteActionPerformed(evt);
            }
        });

        labelTitulo.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        labelTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTitulo.setText("TITULO EVENTO");

        labelDescripcion.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        labelDescripcion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelDescripcion.setText("Descripcion");

        jLabel6.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 12)); // NOI18N
        jLabel6.setText("HORA:");

        jLabel7F.setFont(new java.awt.Font("Microsoft YaHei", 1, 12)); // NOI18N
        jLabel7F.setText("FECHA:");

        botonComprarSlider.setText("Ver Detalles");
        botonComprarSlider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonComprarSliderActionPerformed(evt);
            }
        });

        labelFecha.setText("00/00/0000");

        labelHora.setText("00:00:00");

        jLabel7F1.setFont(new java.awt.Font("Microsoft YaHei", 1, 12)); // NOI18N
        jLabel7F1.setText("Direccion:");

        labelDireccion.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 12)); // NOI18N
        labelDireccion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelDireccion.setText("Direccion");

        labelEspecialidadArtista.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 12)); // NOI18N
        labelEspecialidadArtista.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelEspecialidadArtista.setText("Especialidad");

        jLabel7F2.setFont(new java.awt.Font("Microsoft YaHei", 1, 12)); // NOI18N
        jLabel7F2.setText("ARTISTA INVITADO:");

        labelNombreArtista.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 12)); // NOI18N
        labelNombreArtista.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelNombreArtista.setText("Nombres");

        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(LabelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(labelDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 881, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jSeparator3)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel7F, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(labelFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(147, 147, 147)
                                        .addComponent(jLabel7F1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(labelHora, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(28, 28, 28))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(295, 295, 295)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(234, 234, 234)
                                .addComponent(jLabel7F2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelNombreArtista, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelEspecialidadArtista, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(213, 213, 213)
                                .addComponent(botonAnterior)
                                .addGap(122, 122, 122)
                                .addComponent(botonComprarSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(133, 133, 133)
                                .addComponent(botonSiguiente)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(201, 201, 201))))
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 1401, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(labelTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(labelDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7F, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelHora, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7F1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(labelDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7F2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelNombreArtista, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelEspecialidadArtista, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(botonSiguiente, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(botonAnterior, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addComponent(botonComprarSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(LabelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Microsoft YaHei", 1, 36)); // NOI18N
        jLabel2.setText("TU EVENTO");
        jLabel2.setToolTipText("");

        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Txt_buscarEvento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Txt_buscarEventoActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/logo.png"))); // NOI18N
        jLabel3.setText("jLabel3");

        jButton2.setText("Iniciar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Unete y Publica tu Evento");

        jLabel13.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("DESCUBRE MAS");

        botonVerTickets.setText("Ver Tickets");

        botonVerReservas.setText("Ver Reservas");
        botonVerReservas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonVerReservasActionPerformed(evt);
            }
        });

        botonVertusEventos.setText("Ver Tus Eventos");
        botonVertusEventos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonVertusEventosActionPerformed(evt);
            }
        });

        jButton3.setText("Cerrar Sesión");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        tablaMenu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Byte.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMenuMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tablaMenu);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton2)))
                                .addGap(629, 629, 629)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(Txt_buscarEvento)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(botonVertusEventos)
                                        .addGap(3, 3, 3)
                                        .addComponent(botonVerReservas)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(botonVerTickets)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 1389, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(652, 652, 652)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(botonVertusEventos)
                            .addComponent(botonVerReservas)
                            .addComponent(botonVerTickets)
                            .addComponent(jButton3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jLabel4)
                            .addComponent(jButton1)
                            .addComponent(Txt_buscarEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 3649, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1445, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 868, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAnteriorActionPerformed
        imgIndex--;
        if (imgIndex < 0) {
            imgIndex = imgList.size() - 1;
        }
        showImage(imgIndex);
    }//GEN-LAST:event_botonAnteriorActionPerformed

    private void botonSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSiguienteActionPerformed
        imgIndex++;
        if (imgIndex >= imgList.size()) {
            imgIndex = 0;
        }
        showImage(imgIndex);

    }//GEN-LAST:event_botonSiguienteActionPerformed

    private void botonComprarSliderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonComprarSliderActionPerformed
        String descripcionevento = labelTitulo.getText();

        // Consultar la base de datos para obtener los detalles del evento seleccionado
        Evento eventoSeleccionado = obtenerEventoPorDescripcion(descripcionevento);

        // Mostrar los detalles del evento en la nueva ventana
        if (eventoSeleccionado != null) {
            mostrarDetallesEvento(eventoSeleccionado);
            this.dispose();
        }


    }//GEN-LAST:event_botonComprarSliderActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (Ctrl_Usuario.obtenerUsuarioActivo() == null) {
            Login login = new Login();
            login.setVisible(true);
            login.setLocationRelativeTo(null);
            this.dispose();

        }
        if (Ctrl_Usuario.obtenerUsuarioActivo() != null) {
            CrearEventos ce = new CrearEventos();
            ce.setVisible(true);
            ce.setLocationRelativeTo(null);
            System.out.println(Ctrl_Usuario.obtenerUsuarioActivo().getNombre());
        } else {

        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        textoBusqueda = Txt_buscarEvento.getText().trim();
        Ventana_Busqueda vb = new Ventana_Busqueda(textoBusqueda);
        vb.setVisible(true);
        vb.setLocationRelativeTo(null);
        this.dispose();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void Txt_buscarEventoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Txt_buscarEventoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Txt_buscarEventoActionPerformed

    private void botonVertusEventosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonVertusEventosActionPerformed
        if (Ctrl_Usuario.obtenerUsuarioActivo() == null) {
            Login login = new Login();
            login.setVisible(true);
            login.setLocationRelativeTo(null);
        }
        if (Ctrl_Usuario.obtenerUsuarioActivo() != null) {
            VerTusEventos ve = new VerTusEventos();
            ve.setVisible(true);
            ve.setLocationRelativeTo(null);
        } else {

        }
    }//GEN-LAST:event_botonVertusEventosActionPerformed

    private void botonVerReservasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonVerReservasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botonVerReservasActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Ctrl_Usuario.cerrarSeccion();
        this.dispose();
        Menu_Principal mn = new Menu_Principal();
        mn.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void tablaMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMenuMouseClicked
        int row = tablaMenu.getSelectedRow();
        if (row != -1) {

            // Consultar la base de datos para obtener los detalles del evento seleccionado
            Evento eventoSeleccionado = obtenerEventoPorFila(row);

            // Mostrar los detalles del evento en la nueva ventana
            if (eventoSeleccionado != null) {
                mostrarDetallesEvento(eventoSeleccionado);
                this.dispose();
            }
        }
    }//GEN-LAST:event_tablaMenuMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu_Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LabelImagen;
    private javax.swing.JTextField Txt_buscarEvento;
    private javax.swing.JButton botonAnterior;
    private javax.swing.JButton botonComprarSlider;
    private javax.swing.JButton botonSiguiente;
    private javax.swing.JButton botonVerReservas;
    private javax.swing.JButton botonVerTickets;
    private javax.swing.JButton botonVertusEventos;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7F;
    private javax.swing.JLabel jLabel7F1;
    private javax.swing.JLabel jLabel7F2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JLabel labelDescripcion;
    private javax.swing.JLabel labelDireccion;
    private javax.swing.JLabel labelEspecialidadArtista;
    private javax.swing.JLabel labelFecha;
    private javax.swing.JLabel labelHora;
    private javax.swing.JLabel labelNombreArtista;
    private javax.swing.JLabel labelTitulo;
    private javax.swing.JTable tablaMenu;
    // End of variables declaration//GEN-END:variables

    private Evento obtenerEventoPorFila(int fila) {
        Evento evento = null;
        Connection conexion = Conexion.conectar();
        String consulta = "SELECT * FROM eventos OFFSET ? LIMIT 1";
        try {
            PreparedStatement ps = conexion.prepareStatement(consulta);
            ps.setInt(1, fila);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                evento = new Evento();
                evento.setIdEvento(rs.getInt("id_evento"));
                evento.setNombreEvento(rs.getString("nombre_evento"));
                // Corrige el nombre de columna aquí
                evento.setDescripcionEvento(rs.getString("descripcion_evento"));
                evento.setFecha(rs.getString("fecha"));
                evento.setHora(rs.getString("hora"));
                byte[] bytePoster = rs.getBytes("poster");
                evento.setPoster(bytePoster);
                evento.setIdArtista(rs.getInt("id_artista"));
            }
            conexion.close();
        } catch (SQLException e) {
            System.out.println("Error al obtener detalles del evento: " + e.getMessage());
        }
        return evento;
    }

    private Evento obtenerEventoPorDescripcion(String descripcion) {
        Evento evento = null;
        Connection conexion = Conexion.conectar();
        String consulta = "SELECT * FROM eventos WHERE nombre_evento = ?";
        try {
            PreparedStatement ps = conexion.prepareStatement(consulta);
            ps.setString(1, descripcion);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                evento = new Evento();
                evento.setIdEvento(rs.getInt("id_evento"));
                evento.setNombreEvento(rs.getString("nombre_evento"));
                evento.setDescripcionEvento(rs.getString("descripcion_evento"));
                evento.setFecha(rs.getString("fecha"));
                evento.setHora(rs.getString("hora"));
                // Obtener el póster como un array de bytes y establecerlo directamente
                byte[] bytePoster = rs.getBytes("poster");
                evento.setPoster(bytePoster);
                evento.setIdArtista(rs.getInt("id_artista"));
                // Continuar con el resto de los campos del evento según sea necesario
            }
            conexion.close();
        } catch (SQLException e) {
            System.out.println("Error al obtener detalles del evento: " + e.getMessage());
        }
        return evento;
    }

    private void mostrarDetallesEvento(Evento evento) {
        if (evento != null) {
            int idEvento = evento.getIdEvento();
            Detalles_Evento detallesEvento = new Detalles_Evento(idEvento); // Pasar idEvento al constructor

            detallesEvento.setNombreEvento(evento.getNombreEvento());
            detallesEvento.setDescripcionEvento(evento.getDescripcionEvento());
            detallesEvento.setPoster(evento.getPoster());
            detallesEvento.setHora(evento.getHora());
            detallesEvento.setFecha(evento.getFecha());
            detallesEvento.setDescripcionEvento(evento.getDescripcionEvento());

            detallesEvento.setVisible(true);
            detallesEvento.setLocationRelativeTo(null);
        }
    }

    private void timerSliderImagenes() {
        // Crea un nuevo ActionListener para manejar los eventos del temporizador
        ActionListener actionListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                imgIndex++;
                if (imgIndex >= imgList.size()) {
                    imgIndex = 0;
                }
                showImage(imgIndex);
            }
        };
        timer = new Timer(TIEMPO_DE_ESPERA, actionListener);
        timer.start();
    }

    public ArrayList<byte[]> getImagesList() {
        ArrayList<byte[]> imgList = new ArrayList<>();
        Connection cn = Conexion.conectar();

        try {
            PreparedStatement consulta = cn.prepareStatement("SELECT poster FROM eventos");
            ResultSet rs = consulta.executeQuery();
            while (rs.next()) {
                imgList.add(rs.getBytes("poster"));
            }
            cn.close();
        } catch (SQLException ex) {
            System.out.println("Error en la carga de imágenes: " + ex.getMessage());
        }
        return imgList;
    }

    public List<Evento> getEventosList() {
        List<Evento> eventos = new ArrayList<>();
        Connection cn = Conexion.conectar();

        try {
            PreparedStatement consulta = cn.prepareStatement("SELECT * FROM eventos");
            ResultSet rs = consulta.executeQuery();
            while (rs.next()) {
                Evento evento = new Evento();
                evento.setIdEvento(rs.getInt("id_evento"));
                evento.setNombreEvento(rs.getString("nombre_evento"));
                evento.setDescripcionEvento(rs.getString("descripcion_evento"));
                evento.setFecha(rs.getString("fecha"));
                evento.setHora(rs.getString("hora"));
                evento.setDireccion(rs.getString("direccion"));
                evento.setIdArtista(rs.getInt("id_artista"));
                eventos.add(evento);
            }
            cn.close();
        } catch (SQLException ex) {
            System.out.println("Error en la carga de eventos: " + ex.getMessage());
        }
        return eventos;
    }

    public void showImage(Integer index) {
        if (index >= 0 && index < imgList.size() && index < eventosList.size()) {
            Evento evento = eventosList.get(index);
            byte[] imageData = imgList.get(index);
            if (imageData != null) {
                Image img = new ImageIcon(imageData).getImage().getScaledInstance(LabelImagen.getWidth(), LabelImagen.getHeight(), Image.SCALE_SMOOTH);
                LabelImagen.setIcon(new ImageIcon(img));
                mostrarInformacionEvento(evento);
            } else {
                System.out.println("Error: El array de bytes de la imagen es nulo.");
            }
        } else {
            System.out.println("Error: Índice de imagen fuera de rango.");
        }
    }

    public void mostrarInformacionEvento(Evento evento) {
        if (evento != null) {
            labelTitulo.setText(evento.getNombreEvento());
            labelDescripcion.setText("<html>" + evento.getDescripcionEvento() + "<html>");
            labelFecha.setText(evento.getFecha());
            labelHora.setText(evento.getHora());
            labelDireccion.setText(evento.getDireccion());

            Artista artista = obtenerArtistaPorID(evento.getIdArtista());
            if (artista != null) {
                labelNombreArtista.setText(artista.getNombreArtista());
                labelEspecialidadArtista.setText(artista.getEspecialidad());
            }

        } else {
            labelTitulo.setText("");
            labelDescripcion.setText("");
            labelFecha.setText("");
            labelHora.setText("");
            labelDireccion.setText("");
            labelNombreArtista.setText("");
            labelEspecialidadArtista.setText("");
        }
    }

    private Artista obtenerArtistaPorID(int idArtista) {
        Ctrl_Artista ctrlArtista = new Ctrl_Artista();
        List<Artista> artistas = ctrlArtista.obtenerArtistas();
        for (Artista artista : artistas) {
            if (artista.getIdArtista() == idArtista) {
                return artista;
            }
        }
        return null;
    }

    private void initTabla() {
        DefaultTableModel modeloTabla = (DefaultTableModel) tablaMenu.getModel();
        modeloTabla.setRowCount(0);

        Connection cn = Conexion.conectar();
        try {
            PreparedStatement consulta = cn.prepareStatement("SELECT nombre_evento, descripcion_evento, fecha, direccion, poster FROM eventos");
            ResultSet rs = consulta.executeQuery();
            while (rs.next()) {
                String nombreEvento = rs.getString("nombre_evento");
                String descripcionEvento = rs.getString("descripcion_evento");
                String fechaEvento = rs.getString("fecha");
                String direccionEvento = rs.getString("direccion");
                byte[] poster = rs.getBytes("poster");
                modeloTabla.addRow(new Object[]{nombreEvento, "<html>" + descripcionEvento + "<html>", fechaEvento, "<html>" + direccionEvento + "<html>", poster});
            }
            cn.close();
        } catch (SQLException ex) {
            System.out.println("Error al obtener datos de la base de datos: " + ex.getMessage());
        }

        // Establecer el renderizador de celdas para la columna del póster
        tablaMenu.getColumnModel().getColumn(4).setCellRenderer(new ImageRenderer());

        // Establecer la altura de las filas para que el póster se muestre más grande
        tablaMenu.setRowHeight(330); // Ajustar la altura de las filas para adaptarse al tamaño del póster

        // Ajustar el margen entre filas
        tablaMenu.setRowMargin(10); // Ajustar el margen entre las filas

        // Establecer el estilo de la fuente para el título y la descripción
        tablaMenu.setFont(new Font("Arial", Font.BOLD, 14)); // Establecer la fuente en negrita con tamaño de 12 puntos

        // Establecer renderizadores personalizados para la alineación del texto sin padding
        DefaultTableCellRenderer topAlignedRenderer = new DefaultTableCellRenderer();
        topAlignedRenderer.setVerticalAlignment(SwingConstants.TOP);

        // Aplicar el renderizador a las columnas necesarias (nombre_evento, descripcion_evento, fecha, direccion)
        tablaMenu.getColumnModel().getColumn(0).setCellRenderer(topAlignedRenderer);
        tablaMenu.getColumnModel().getColumn(1).setCellRenderer(topAlignedRenderer);
        tablaMenu.getColumnModel().getColumn(2).setCellRenderer(topAlignedRenderer);
        tablaMenu.getColumnModel().getColumn(3).setCellRenderer(topAlignedRenderer);
    }

    class ImageRenderer extends DefaultTableCellRenderer {

        JLabel label;

        public ImageRenderer() {
            label = new JLabel();
            label.setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (value != null) {
                // Escalar la imagen al tamaño deseado
                ImageIcon icon = new ImageIcon((byte[]) value);
                Image image = icon.getImage().getScaledInstance(270, 330, Image.SCALE_SMOOTH);
                label.setIcon(new ImageIcon(image));
            } else {
                label.setIcon(null);
            }
            return label;
        }
    }
}
