/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import conexion.Conexion;
import controlador.Ctrl_Pagos;
import controlador.Ctrl_Reservas;
import controlador.Ctrl_Usuario;
import java.awt.Font;
import java.awt.Frame;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.time.LocalDate;
import java.time.LocalTime;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import modelo.Evento;
import modelo.Pago;
import modelo.Usuario;

/**
 *
 * @author andre
 */
public class Ventana_Reservas extends javax.swing.JFrame {

    /**
     * Creates new form Ventana_Reservas
     */
    public Ventana_Reservas() {
        initComponents();
        initTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaReservas = new javax.swing.JTable();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Selecciona la reserva a pagar");

        tablaReservas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Num Reserva", "Evento", "Localidad", "Fecha", "Hora", "Cantidad", "Monto", "Estado Reserva"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaReservas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaReservasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaReservas);
        if (tablaReservas.getColumnModel().getColumnCount() > 0) {
            tablaReservas.getColumnModel().getColumn(0).setResizable(false);
            tablaReservas.getColumnModel().getColumn(1).setResizable(false);
            tablaReservas.getColumnModel().getColumn(2).setResizable(false);
            tablaReservas.getColumnModel().getColumn(3).setResizable(false);
            tablaReservas.getColumnModel().getColumn(4).setResizable(false);
            tablaReservas.getColumnModel().getColumn(5).setResizable(false);
            tablaReservas.getColumnModel().getColumn(6).setResizable(false);
            tablaReservas.getColumnModel().getColumn(7).setResizable(false);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 592, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(244, 244, 244))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1052, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 670, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tablaReservasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaReservasMouseClicked
        int row = tablaReservas.getSelectedRow();
        if (row != -1) {
            // Obtener los datos de la fila seleccionada
            int idReserva = (int) tablaReservas.getValueAt(row, 0);
            float monto = (float) tablaReservas.getValueAt(row, 6);
            String nombreEvento = (String) tablaReservas.getValueAt(row, 1); // Ajusta el índice según la columna que contenga el nombre del evento
            String fechaHora = tablaReservas.getValueAt(row, 3) + " " + tablaReservas.getValueAt(row, 4); // Ajusta los índices según las columnas que contengan la fecha y la hora del evento
            String nombreUsuario =Ctrl_Usuario.obtenerUsuarioActivo().getNombre(); // Debes obtener el nombre del usuario actual

            // Mostrar la ventana de la pasarela de pago con los datos relevantes
            Pasarela_Pagos pasarela = new Pasarela_Pagos(
                    (Frame) SwingUtilities.getWindowAncestor(this),
                    monto,
                    nombreEvento,
                    fechaHora,
                    nombreUsuario
            );
            pasarela.setLocationRelativeTo(SwingUtilities.getWindowAncestor(this)); // Centrar la ventana
            pasarela.setVisible(true);

            if (pasarela.isPagoConfirmado()) {
                // Obtener la fecha y hora actual
                LocalDate fechaActual = LocalDate.now();
                LocalTime horaActual = LocalTime.now();

                // Crear el objeto Pago
                Pago pago = new Pago();
                pago.setMetodoPago("Tarjeta de Crédito"); // Puedes cambiar esto según el método de pago deseado
                pago.setEstadoPago("Pagada");
                pago.setMontoTotal(monto);
                pago.setFechaPago(fechaActual.toString());
                pago.setHoraPago(horaActual.toString());
                pago.setReservaId(idReserva);

                // Crear el pago y actualizar el estado de la reserva
                Ctrl_Pagos ctrlPagos = new Ctrl_Pagos();
                boolean pagoExitoso = ctrlPagos.crearPago(pago);

                if (pagoExitoso) {
                    // Actualizar el estado de la reserva a "Pagada"
                    Ctrl_Reservas ctrlReservas = new Ctrl_Reservas();
                    boolean estadoActualizado = ctrlReservas.actualizarEstadoReserva(idReserva, "Pagada");

                    if (estadoActualizado) {
                        JOptionPane.showMessageDialog(null, "Pago realizado y reserva actualizada exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                        // Opcional: Actualizar la tabla de reservas para reflejar los cambios
                        initTabla();
                    } else {
                        JOptionPane.showMessageDialog(null, "Error al actualizar el estado de la reserva.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Error al realizar el pago.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Compra Cancelada.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Por favor seleccione una reserva para realizar el pago.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_tablaReservasMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana_Reservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana_Reservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana_Reservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana_Reservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana_Reservas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    public static javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    public static javax.swing.JTable tablaReservas;
    // End of variables declaration//GEN-END:variables

    private void initTabla() {
        DefaultTableModel modeloTabla = (DefaultTableModel) tablaReservas.getModel();
        modeloTabla.setRowCount(0);

        // Obtener el usuario activo
        Ctrl_Usuario ctrlUsuario = new Ctrl_Usuario();
        Usuario usuarioActivo = ctrlUsuario.obtenerUsuarioActivo();

        if (usuarioActivo != null) {
            int idUsuario = usuarioActivo.getIdUsuario();

            Connection cn = Conexion.conectar();
            try {
                // Consulta SQL para obtener los datos necesarios de las tablas de reservas, eventos y localidades
                String sql = "SELECT r.reserva_id, e.nombre_evento, l.tipo_localidad, r.fecha_reserva, r.hora_reserva, "
                        + "r.cantidad_tiquetes, r.estado_reserva, (SELECT precio FROM Localidades WHERE id_localidad = r.localidad_id)  AS precio_localidad "
                        + "FROM Reservas r "
                        + "JOIN Eventos e ON r.evento_id = e.id_evento "
                        + "JOIN Localidades l ON r.localidad_id = l.id_localidad "
                        + "WHERE r.usuario_id = ? and r.estado_reserva = 'Pendiente'";

                PreparedStatement consulta = cn.prepareStatement(sql);
                consulta.setInt(1, idUsuario);
                ResultSet rs = consulta.executeQuery();
                while (rs.next()) {
                    int idReserva = rs.getInt("reserva_id");
                    String nombreEvento = rs.getString("nombre_evento");
                    String tipoLocalidad = rs.getString("tipo_localidad");
                    String fechaReserva = rs.getString("fecha_reserva");
                    String horaReserva = rs.getString("hora_reserva");
                    int cantidadTiquetes = rs.getInt("cantidad_tiquetes");
                    float precioLocalidad = rs.getFloat("precio_localidad");
                    String estadoReserva = rs.getString("estado_reserva");

                    // Calcular el monto total
                    float montoTotal = cantidadTiquetes * precioLocalidad;

                    modeloTabla.addRow(new Object[]{
                        idReserva,
                        nombreEvento,
                        tipoLocalidad,
                        fechaReserva,
                        horaReserva,
                        cantidadTiquetes,
                        montoTotal,
                        estadoReserva
                    });
                }
                cn.close();
            } catch (SQLException ex) {
                System.out.println("Error al obtener datos de la base de datos: " + ex.getMessage());
            }

            // Ajustar la altura de las filas para adaptarse al contenido
            tablaReservas.setRowHeight(30); // Puedes ajustar la altura según sea necesario

            // Establecer el estilo de la fuente para el título y la descripción
            tablaReservas.setFont(new Font("Arial", Font.BOLD, 14)); // Establecer la fuente en negrita con tamaño de 14 puntos

            // Establecer renderizadores personalizados para la alineación del texto
            DefaultTableCellRenderer topAlignedRenderer = new DefaultTableCellRenderer();
            topAlignedRenderer.setVerticalAlignment(SwingConstants.TOP);

            for (int i = 0; i < tablaReservas.getColumnCount(); i++) {
                tablaReservas.getColumnModel().getColumn(i).setCellRenderer(topAlignedRenderer);
            }
        } else {
            // Mostrar un mensaje de error si no hay usuario activo
            JOptionPane.showMessageDialog(null, "No hay un usuario activo. Por favor inicie sesión.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
